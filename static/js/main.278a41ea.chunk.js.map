{"version":3,"sources":["logo.svg","serviceWorker.js","components/Card/Card.js","components/Map/Map.js","components/Table/Table.js","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Card","tableData","totCalc","className","delay","end","Map","chartData","height","padding","chartType","data","mapsApiKey","rootProps","options","colorAxis","colors","datalessRegionColor","defaultColor","todayCases","cell","row","confirmed","style","color","fontSize","styValues","rowIndex","colIndex","backgroundColor","headerStyle","fontWeight","smColumns","dataField","text","sort","formatter","lColumns","defaultSorted","order","Table","smTableData","width","bootstrap4","keyField","columns","headers","isoCountries","App","returnTabData","countryName","recovered","deaths","getCountryName","countryCode","hasOwnProperty","addTot","val","key","map","e","reduce","a","fetchAPI","fetch","response","json","i","length","country","push","countryInfo","iso2","cases","setState","dataLoadingStatus","state","this","Navbar","bg","variant","Brand","href","alt","src","Logo","Spinner","animation","role","handleWidth","EasingType","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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QACP,GAAO,mBACP,GAAO,0BACP,GAAO,WACP,GAAO,UACP,GAAO,QACP,GAAO,6BACP,GAAO,eACP,GAAO,aACP,GAAO,gBACP,GAAO,UACP,GAAO,OACP,GAAO,SACP,GAAO,iBACP,GAAO,UACP,GAAO,WACP,GAAO,WACP,GAAO,qBACP,GAAO,UACP,GAAO,QACP,GAAO,cACP,GAAO,oBACP,GAAO,UACP,GAAO,UACP,GAAO,WACP,GAAO,8BACP,GAAO,gBACP,GAAO,OACP,GAAO,UACP,GAAO,SACP,GAAO,gBACP,GAAO,mBACP,GAAO,8BACP,GAAO,QACP,GAAO,SACP,GAAO,UACP,GAAO,UACP,GAAO,QACP,GAAO,YACP,GAAO,SACP,GAAO,YACP,GAAO,UACP,GAAO,aACP,GAAO,OACP,GAAO,YACP,GAAO,WACP,GAAO,SACP,GAAO,gBACP,GAAO,SACP,GAAO,QACP,GAAO,kCACP,GAAO,gCACP,GAAO,WACP,GAAO,YACP,GAAO,UACP,GAAO,UACP,GAAO,QACP,GAAO,YACP,GAAO,4BACP,GAAO,OACP,GAAO,UACP,GAAO,cACP,GAAO,SACP,GAAO,QACP,GAAO,UACP,GAAO,QACP,GAAO,SACP,GAAO,SACP,GAAO,aACP,GAAO,QACP,GAAO,WACP,GAAO,QACP,GAAO,SACP,GAAO,aACP,GAAO,mCACP,GAAO,SACP,GAAO,UACP,GAAO,UACP,GAAO,UACP,GAAO,yBACP,GAAO,gBACP,GAAO,YACP,GAAO,aACP,GAAO,QACP,GAAO,YACP,GAAO,aACP,GAAO,SACP,GAAO,WACP,GAAO,WACP,GAAO,OACP,GAAO,QACP,GAAO,mBACP,GAAO,aACP,GAAO,aACP,GAAO,YACP,GAAO,UACP,GAAO,SACP,GAAO,kCACP,GAAO,UACP,GAAO,SACP,GAAO,WACP,GAAO,aACP,GAAO,aACP,GAAO,UACP,GAAO,aACP,GAAO,UACP,GAAO,UACP,GAAO,QACP,GAAO,QACP,GAAO,cACP,GAAO,uBACP,GAAO,gBACP,GAAO,cACP,GAAO,YACP,GAAO,QACP,GAAO,UACP,GAAO,OACP,GAAO,iBACP,G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","file":"static/js/main.278a41ea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.e72cf4be.svg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nimport CountUp from 'react-countup';\r\n\r\nfunction Card({tableData, totCalc}){\r\n    return(\r\n        <div className=\"card-group p-2 fadeIn \">\r\n        <div className=\"card bg-danger\">\r\n      <div className=\"card-body text-center text-white font-weight-bold fadeIn1\">\r\n      Deaths\r\n        <p className=\"card-text text-white fadeIn2\">\r\n          <CountUp delay={2} end={totCalc(tableData,'deaths')} /></p>\r\n      </div>\r\n    </div>\r\n  \r\n    <div className=\"card bg-warning\">\r\n      <div className=\"card-body text-center text-white font-weight-bold fadeIn1\">\r\n        Confirmed\r\n        \r\n\r\n        <p className=\"card-text text-white fadeIn2\">\r\n        <CountUp delay={2} end={totCalc(tableData,'confirmed')}/></p>\r\n      </div>\r\n    </div>\r\n    <div className=\"card bg-success\">\r\n      <div className=\"card-body text-center text-white font-weight-bold fadeIn1\">\r\n      Recovered\r\n  \r\n        <p className=\"card-text text-white fadeIn2\">\r\n        <CountUp delay={2} end={totCalc(tableData,'recovered')}/></p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  \r\n    )\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport { Chart } from \"react-google-charts\";\r\n\r\n function Map ({chartData}){\r\n    return (\r\n        <Chart\r\n         height={'300px'}\r\n         padding={'40px'}\r\n        chartType=\"GeoChart\"\r\n        data={chartData}\r\n        // Note: you will need to get a mapsApiKey for your project.\r\n        // See: https://developers.google.com/chart/interactive/docs/basic_load_libs#load-settings\r\n        mapsApiKey=\"AIzaSyDj3reNpBglRu9Tuqri7MpJ4zSKkB_spSU\"\r\n        rootProps={{ 'data-testid': '1' }}\r\n        options={{\r\n          colorAxis: { colors: ['#f2908d','#e31b23'] },\r\n          datalessRegionColor: '#fff',\r\n          defaultColor: '#f5f5f5',\r\n        } \r\n      }\r\n      />\r\n    );\r\n}\r\nexport default Map;","import React from 'react';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\n\r\n\r\nconst todayCases = (cell, row) =>{\r\n  if (row.todayCases) {\r\n    return (\r\n      <span>\r\n         \r\n      {row.confirmed}\r\n    <strong style={ { color: 'red', fontSize: '0.7rem' } }>  +{row.todayCases}</strong>\r\n      </span>\r\n    );\r\n  }\r\n  return (\r\n    <span>\r\n       \r\n    {row.confirmed}\r\n    </span>);\r\n\r\n}\r\n\r\n\r\nconst styValues = (cell, row, rowIndex, colIndex) => {\r\n  if (rowIndex % 2 === 0) {\r\n    return {\r\n      backgroundColor: '#fff',\r\n      fontSize: '1rem',\r\n\r\n    };\r\n  }\r\n  return {\r\n    backgroundColor: '#D3D3D3',\r\n    fontSize: '1rem'\r\n  };\r\n}\r\n\r\nconst headerStyle={\r\n  fontSize: '1rem',\r\n  fontWeight: 'bold',\r\n  backgroundColor: '#D3D3D3'\r\n}\r\n\r\nconst smColumns = [{\r\n  dataField: 'countryName',\r\n  text: 'CTY',\r\n  sort: true,\r\n  style: styValues,\r\n  headerStyle: headerStyle\r\n}\r\n, {\r\n  dataField: 'confirmed',\r\n  text: 'C',\r\n  sort: true,\r\n  formatter: todayCases,\r\n  style:styValues,\r\n  headerStyle: headerStyle\r\n\r\n}, {\r\n  dataField: 'recovered',\r\n  text: 'R',\r\n  style:styValues,\r\n  headerStyle: headerStyle,\r\n  sort: true\r\n\r\n},\r\n{\r\n  dataField: 'deaths',\r\n  text: 'D',\r\n  style:styValues,\r\n  headerStyle: headerStyle,\r\n  sort: true\r\n\r\n}\r\n];\r\n\r\nconst lColumns = [{\r\n  dataField: 'countryName',\r\n  text: 'Country Name',\r\n  sort: true,\r\n  style:styValues,\r\n  headerStyle: headerStyle,\r\n\r\n}, {\r\n  dataField: 'confirmed',\r\n  text: 'Confirmed',\r\n  formatter: todayCases,\r\n  style:styValues,\r\n  headerStyle: headerStyle,\r\n  sort:true\r\n\r\n}, {\r\n  dataField: 'recovered',\r\n  text: 'Recovered',\r\n  style:styValues,\r\n  headerStyle: headerStyle,\r\n  sort: true\r\n\r\n},\r\n{\r\n  dataField: 'deaths',\r\n  text: 'Deaths',\r\n  style:styValues,\r\n  headerStyle: headerStyle,\r\n  sort: true\r\n\r\n}\r\n];\r\nconst defaultSorted = [{\r\n  dataField: 'name',\r\n  order: 'desc'\r\n}];\r\n\r\n\r\nconst Table = ({tableData, smTableData, width})=>{\r\n  return (    <div className='table'>\r\n\r\n {width<500?<BootstrapTable   bootstrap4\r\n    keyField='id' columns={smColumns} data={smTableData}  headers={true} defaultSorted={defaultSorted} />:\r\n    <BootstrapTable   bootstrap4\r\n    keyField='id' columns={lColumns} data={tableData}  headers={true} defaultSorted={defaultSorted} />\r\n }\r\n</div>\r\n    \r\n    );\r\n}\r\n\r\n\r\nexport default Table;","import React from 'react';\r\nimport './App.css';\r\nimport Card from './components/Card/Card';\r\nimport Map from './components/Map/Map';\r\n// import Country from './components/Country/Country';\r\nimport Tables from './components/Table/Table';\r\nimport ReactResizeDetector from 'react-resize-detector';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\n// import Select from 'react-select';\r\nimport Logo from './logo.svg';\r\nimport {CircleArrow as ScrollUpButton} from \"react-scroll-up-button\";\r\n\r\n\r\nconst isoCountries = {\r\n  'AF' : 'Afghanistan',\r\n  'AX' : 'Aland Islands',\r\n  'AL' : 'Albania',\r\n  'DZ' : 'Algeria',\r\n  'AS' : 'American Samoa',\r\n  'AD' : 'Andorra',\r\n  'AO' : 'Angola',\r\n  'AI' : 'Anguilla',\r\n  'AQ' : 'Antarctica',\r\n  'AG' : 'Antigua And Barbuda',\r\n  'AR' : 'Argentina',\r\n  'AM' : 'Armenia',\r\n  'AW' : 'Aruba',\r\n  'AU' : 'Australia',\r\n  'AT' : 'Austria',\r\n  'AZ' : 'Azerbaijan',\r\n  'BS' : 'Bahamas',\r\n  'BH' : 'Bahrain',\r\n  'BD' : 'Bangladesh',\r\n  'BB' : 'Barbados',\r\n  'BY' : 'Belarus',\r\n  'BE' : 'Belgium',\r\n  'BZ' : 'Belize',\r\n  'BJ' : 'Benin',\r\n  'BM' : 'Bermuda',\r\n  'BT' : 'Bhutan',\r\n  'BO' : 'Bolivia',\r\n  'BA' : 'Bosnia And Herzegovina',\r\n  'BW' : 'Botswana',\r\n  'BV' : 'Bouvet Island',\r\n  'BR' : 'Brazil',\r\n  'IO' : 'British Indian Ocean Territory',\r\n  'BN' : 'Brunei Darussalam',\r\n  'BG' : 'Bulgaria',\r\n  'BF' : 'Burkina Faso',\r\n  'BI' : 'Burundi',\r\n  'KH' : 'Cambodia',\r\n  'CM' : 'Cameroon',\r\n  'CA' : 'Canada',\r\n  'CV' : 'Cape Verde',\r\n  'KY' : 'Cayman Islands',\r\n  'CF' : 'Central African Republic',\r\n  'TD' : 'Chad',\r\n  'CL' : 'Chile',\r\n  'CN' : 'China',\r\n  'CX' : 'Christmas Island',\r\n  'CC' : 'Cocos (Keeling) Islands',\r\n  'CO' : 'Colombia',\r\n  'KM' : 'Comoros',\r\n  'CG' : 'Congo',\r\n  'CD' : 'Congo, Democratic Republic',\r\n  'CK' : 'Cook Islands',\r\n  'CR' : 'Costa Rica',\r\n  'CI' : 'Cote D\\'Ivoire',\r\n  'HR' : 'Croatia',\r\n  'CU' : 'Cuba',\r\n  'CY' : 'Cyprus',\r\n  'CZ' : 'Czech Republic',\r\n  'DK' : 'Denmark',\r\n  'DJ' : 'Djibouti',\r\n  'DM' : 'Dominica',\r\n  'DO' : 'Dominican Republic',\r\n  'EC' : 'Ecuador',\r\n  'EG' : 'Egypt',\r\n  'SV' : 'El Salvador',\r\n  'GQ' : 'Equatorial Guinea',\r\n  'ER' : 'Eritrea',\r\n  'EE' : 'Estonia',\r\n  'ET' : 'Ethiopia',\r\n  'FK' : 'Falkland Islands (Malvinas)',\r\n  'FO' : 'Faroe Islands',\r\n  'FJ' : 'Fiji',\r\n  'FI' : 'Finland',\r\n  'FR' : 'France',\r\n  'GF' : 'French Guiana',\r\n  'PF' : 'French Polynesia',\r\n  'TF' : 'French Southern Territories',\r\n  'GA' : 'Gabon',\r\n  'GM' : 'Gambia',\r\n  'GE' : 'Georgia',\r\n  'DE' : 'Germany',\r\n  'GH' : 'Ghana',\r\n  'GI' : 'Gibraltar',\r\n  'GR' : 'Greece',\r\n  'GL' : 'Greenland',\r\n  'GD' : 'Grenada',\r\n  'GP' : 'Guadeloupe',\r\n  'GU' : 'Guam',\r\n  'GT' : 'Guatemala',\r\n  'GG' : 'Guernsey',\r\n  'GN' : 'Guinea',\r\n  'GW' : 'Guinea-Bissau',\r\n  'GY' : 'Guyana',\r\n  'HT' : 'Haiti',\r\n  'HM' : 'Heard Island & Mcdonald Islands',\r\n  'VA' : 'Holy See (Vatican City State)',\r\n  'HN' : 'Honduras',\r\n  'HK' : 'Hong Kong',\r\n  'HU' : 'Hungary',\r\n  'IS' : 'Iceland',\r\n  'IN' : 'India',\r\n  'ID' : 'Indonesia',\r\n  'IR' : 'Iran, Islamic Republic Of',\r\n  'IQ' : 'Iraq',\r\n  'IE' : 'Ireland',\r\n  'IM' : 'Isle Of Man',\r\n  'IL' : 'Israel',\r\n  'IT' : 'Italy',\r\n  'JM' : 'Jamaica',\r\n  'JP' : 'Japan',\r\n  'JE' : 'Jersey',\r\n  'JO' : 'Jordan',\r\n  'KZ' : 'Kazakhstan',\r\n  'KE' : 'Kenya',\r\n  'KI' : 'Kiribati',\r\n  'KR' : 'Korea',\r\n  'KW' : 'Kuwait',\r\n  'KG' : 'Kyrgyzstan',\r\n  'LA' : 'Lao People\\'s Democratic Republic',\r\n  'LV' : 'Latvia',\r\n  'LB' : 'Lebanon',\r\n  'LS' : 'Lesotho',\r\n  'LR' : 'Liberia',\r\n  'LY' : 'Libyan Arab Jamahiriya',\r\n  'LI' : 'Liechtenstein',\r\n  'LT' : 'Lithuania',\r\n  'LU' : 'Luxembourg',\r\n  'MO' : 'Macao',\r\n  'MK' : 'Macedonia',\r\n  'MG' : 'Madagascar',\r\n  'MW' : 'Malawi',\r\n  'MY' : 'Malaysia',\r\n  'MV' : 'Maldives',\r\n  'ML' : 'Mali',\r\n  'MT' : 'Malta',\r\n  'MH' : 'Marshall Islands',\r\n  'MQ' : 'Martinique',\r\n  'MR' : 'Mauritania',\r\n  'MU' : 'Mauritius',\r\n  'YT' : 'Mayotte',\r\n  'MX' : 'Mexico',\r\n  'FM' : 'Micronesia, Federated States Of',\r\n  'MD' : 'Moldova',\r\n  'MC' : 'Monaco',\r\n  'MN' : 'Mongolia',\r\n  'ME' : 'Montenegro',\r\n  'MS' : 'Montserrat',\r\n  'MA' : 'Morocco',\r\n  'MZ' : 'Mozambique',\r\n  'MM' : 'Myanmar',\r\n  'NA' : 'Namibia',\r\n  'NR' : 'Nauru',\r\n  'NP' : 'Nepal',\r\n  'NL' : 'Netherlands',\r\n  'AN' : 'Netherlands Antilles',\r\n  'NC' : 'New Caledonia',\r\n  'NZ' : 'New Zealand',\r\n  'NI' : 'Nicaragua',\r\n  'NE' : 'Niger',\r\n  'NG' : 'Nigeria',\r\n  'NU' : 'Niue',\r\n  'NF' : 'Norfolk Island',\r\n  'MP' : 'Northern Mariana Islands',\r\n  'NO' : 'Norway',\r\n  'OM' : 'Oman',\r\n  'PK' : 'Pakistan',\r\n  'PW' : 'Palau',\r\n  'PS' : 'Palestinian Territory, Occupied',\r\n  'PA' : 'Panama',\r\n  'PG' : 'Papua New Guinea',\r\n  'PY' : 'Paraguay',\r\n  'PE' : 'Peru',\r\n  'PH' : 'Philippines',\r\n  'PN' : 'Pitcairn',\r\n  'PL' : 'Poland',\r\n  'PT' : 'Portugal',\r\n  'PR' : 'Puerto Rico',\r\n  'QA' : 'Qatar',\r\n  'RE' : 'Reunion',\r\n  'RO' : 'Romania',\r\n  'RU' : 'Russia',\r\n  'RW' : 'Rwanda',\r\n  'BL' : 'Saint Barthelemy',\r\n  'SH' : 'Saint Helena',\r\n  'KN' : 'Saint Kitts And Nevis',\r\n  'LC' : 'Saint Lucia',\r\n  'MF' : 'Saint Martin',\r\n  'PM' : 'Saint Pierre And Miquelon',\r\n  'VC' : 'Saint Vincent And Grenadines',\r\n  'WS' : 'Samoa',\r\n  'SM' : 'San Marino',\r\n  'ST' : 'Sao Tome And Principe',\r\n  'SA' : 'Saudi Arabia',\r\n  'SN' : 'Senegal',\r\n  'RS' : 'Serbia',\r\n  'SC' : 'Seychelles',\r\n  'SL' : 'Sierra Leone',\r\n  'SG' : 'Singapore',\r\n  'SK' : 'Slovakia',\r\n  'SI' : 'Slovenia',\r\n  'SB' : 'Solomon Islands',\r\n  'SO' : 'Somalia',\r\n  'ZA' : 'South Africa',\r\n  'GS' : 'South Georgia And Sandwich Isl.',\r\n  'ES' : 'Spain',\r\n  'LK' : 'Sri Lanka',\r\n  'SD' : 'Sudan',\r\n  'SR' : 'Suriname',\r\n  'SJ' : 'Svalbard And Jan Mayen',\r\n  'SZ' : 'Swaziland',\r\n  'SE' : 'Sweden',\r\n  'CH' : 'Switzerland',\r\n  'SY' : 'Syrian Arab Republic',\r\n  'TW' : 'Taiwan',\r\n  'TJ' : 'Tajikistan',\r\n  'TZ' : 'Tanzania',\r\n  'TH' : 'Thailand',\r\n  'TL' : 'Timor-Leste',\r\n  'TG' : 'Togo',\r\n  'TK' : 'Tokelau',\r\n  'TO' : 'Tonga',\r\n  'TT' : 'Trinidad And Tobago',\r\n  'TN' : 'Tunisia',\r\n  'TR' : 'Turkey',\r\n  'TM' : 'Turkmenistan',\r\n  'TC' : 'Turks And Caicos Islands',\r\n  'TV' : 'Tuvalu',\r\n  'UG' : 'Uganda',\r\n  'UA' : 'Ukraine',\r\n  'AE' : 'United Arab Emirates',\r\n  'GB' : 'United Kingdom',\r\n  'US' : 'United States',\r\n  'UM' : 'United States Outlying Islands',\r\n  'UY' : 'Uruguay',\r\n  'UZ' : 'Uzbekistan',\r\n  'VU' : 'Vanuatu',\r\n  'VE' : 'Venezuela',\r\n  'VN' : 'Viet Nam',\r\n  'VG' : 'Virgin Islands, British',\r\n  'VI' : 'Virgin Islands, U.S.',\r\n  'WF' : 'Wallis And Futuna',\r\n  'EH' : 'Western Sahara',\r\n  'YE' : 'Yemen',\r\n  'ZM' : 'Zambia',\r\n  'ZW' : 'Zimbabwe'\r\n};\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(){\r\n    super();\r\n    this.state={ dataLoadingStatus: 'loading', chartData: [],tableData: [],smTableData: []//,options:[], currVal:'',toggle:'home'\r\n  };\r\n  \r\n  }\r\n\r\n    reset (){\r\n      this.setState({dataLoadingStatus: 'loading', chartData: [],tableData: [],smTableData:[]//,options:[],currVal:'', toggle:'home'\r\n    });\r\n    }\r\n    returnTabData = (countryName,confirmed,recovered,deaths,todayCases) =>{\r\n      return {countryName:countryName,confirmed:confirmed,recovered:recovered,deaths:deaths,todayCases:todayCases};\r\n    };\r\n     getCountryName =(countryCode) =>{\r\n      if (isoCountries.hasOwnProperty(countryCode)) {\r\n          return isoCountries[countryCode];\r\n      } else {\r\n          return countryCode;\r\n      }\r\n    }\r\n    addTot = (val, key) => {\r\n      let returnVal = val.map(e => e[key]).reduce((a, e) => a + e, 0);\r\n      return returnVal;\r\n    }\r\n     fetchAPI = async () =>{\r\n      const response = await fetch('https://corona.lmao.ninja/v2/countries')\r\n      const json = await response.json()\r\n      const tableData = [];\r\n      const smTableData=[];\r\n      //const options =[];\r\n      const chartData = [['Country Name', 'Confirmed Cases','Today Cases']]\r\n      for (let i = 0; i < json.length; i += 1) {\r\n        if(json[i].country!=='World'){\r\n        chartData.push([this.getCountryName(json[i].countryInfo.iso2)?this.getCountryName(json[i].countryInfo.iso2):json[i].country,json[i].cases,json[i].todayCases]);\r\n        tableData.push(this.returnTabData(\r\n          json[i].country,\r\n          json[i].cases,\r\n          json[i].recovered,\r\n          json[i].deaths,\r\n          json[i].todayCases));\r\n          \r\n          if(json[i].countryInfo.iso2){\r\n          smTableData.push(this.returnTabData(\r\n           json[i].countryInfo.iso2,\r\n            json[i].cases,\r\n            json[i].recovered,\r\n            json[i].deaths,\r\n            json[i].todayCases));\r\n           // options.push(json[i].country);\r\n          }\r\n        }\r\n      }\r\n      this.setState({\r\n        dataLoadingStatus: 'ready',\r\n        chartData: chartData,\r\n        tableData: tableData,\r\n        smTableData:smTableData,\r\n        // ,\r\n        // options: options\r\n      })\r\n  }\r\n  // handleChange = (values) => {\r\n  //   this.setState({toggle:'',\r\n  //   currVal: values})\r\n  // }\r\n  componentDidMount(){\r\n    this.fetchAPI();\r\n  }\r\n  // handleClick = (value) =>{\r\n  //   this.setState({toggle: value})\r\n  // }\r\n\r\n  render(){\r\n    const {dataLoadingStatus, chartData, tableData,smTableData//, options, toggle\r\n    }= this.state;\r\n  return (\r\n    <>\r\n      \r\n      <Navbar bg=\"dark\" variant=\"dark\">\r\n    <Navbar.Brand href=\"#home\">\r\n      <img\r\n        alt=\"COVID-19\"\r\n        src={Logo}\r\n        width=\"30\"\r\n        height=\"30\"\r\n        className=\"d-inline-block align-top\"\r\n      />{' '}\r\n      COVID-19\r\n    </Navbar.Brand>\r\n  </Navbar>\r\n        {dataLoadingStatus !=='ready'?\r\n       <Spinner className=\"spinner\" animation=\"border\" role=\"status\" >\r\n       <span className=\"sr-only\">Loading...</span>\r\n     </Spinner>\r\n  :\r\n  <ReactResizeDetector handleWidth>\r\n  {({ width }) => \r\n  // toggle ==='home'?\r\n  \r\n\r\n  <>\r\n  \r\n  {/* <Select options={options} onChange={this.handleChange} color='#fff'/> */}\r\n\r\n    <div className=\"App fadeIn\">\r\n      <div className=\"App-header\">\r\n        <Card tableData = {tableData} totCalc ={this.addTot}/>\r\n<div className=\"container\">\r\n  <div className=\"row\">\r\n    <div className=\"col-md-12 col-xl-6 fadeIn2 \">\r\n    <div className='p-2'>\r\n      <Map chartData={chartData}/>\r\n      </div>\r\n\r\n    </div>\r\n    <div className=\"col-md-12 col-xl-6 fadeIn2\">\r\n    <div className='p-2'>\r\n    <ScrollUpButton\r\n          EasingType=\"easeInOutBounce\"\r\n        />\r\n      <Tables tableData={tableData} smTableData={smTableData} width={width}/>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  </div>\r\n   \r\n        \r\n        </div>\r\n    \r\n  </div>\r\n     </>\r\n    // :\r\n    // <>\r\n    // <Country toggleFunc={this.handleClick}/>\r\n    // </>\r\n      }\r\n  \r\n    </ReactResizeDetector>\r\n  }\r\n</>\r\n  \r\n  );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n// import Component from 'react-component-component';\r\n// import Map from './components/Map/Map';\r\n// import CustomizedTables from './components/Table/Table';\r\n import App from './App';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\r\n\r\n\r\n\r\nReactDOM.render( <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}